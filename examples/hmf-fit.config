################################################################################
#                                                                              #
#                             HMF-FIT CONFIG FILE                              #
#                                                                              #
################################################################################
# This is a template configuration file for hmf-fit. Specify each parameter    #
# tailored to your application. All optional arguments are clearly marked      #
# and if you don't want it to be set, just put a "#" at the start of the line. #
#                                                                              #
# The important part is the specification of the paramaters used in the fit.   #
# This can be done in several ways. All parameters are specified as a list
# containing information about the prior. The first element of the list is
# always the type of prior distribution. This can take the values "unif",
# "log" (a log-uniform distribution) or "norm". A "unif" distribution
# is always specified as ["unif", min,max,guess], where <guess> is the initial
# guess for the fit. It can be set to None (note the capital N) for automatic
# guessing. "log" takes the same arguments, except that each is in log-space.
# "norm" will usually take the arguments ["norm", mean, stdev, guess].
# There is a major exception to the above, in the case of cosmological
# parameters. These come under the heading CosmoParams. In addition to the
# above, these may take the distribution "cov", a multivariate normal
# distribution (this is specified simply as ["cov",guess]. The covariance
# matrix for this distribution is specified by choosing a set of CMB results
# for the covar_data parameter. If this is not set, an error will occur when
# trying to use "cov" priors. Additionally, if covar_data is set, then "norm"
# priors can be specified as ["norm",guess], where the mean and stdev will be
# gotten from the same dataset.
#
# Any parameters that are specified in a sub-dictionary (eg. cosmo_params)
# must be set under a section heading "<dictname>Params".
#                                                                              #
# Finally the other parameters of the model, which are not varied, can be      #
# specified under the Model section (with same variable names as in the        #
# HaloModel constructor).                                                      #
################################################################################

[Data] #########################################################################
# data_file is a file with 2 (or optionally 3) columns. The first column is the
# ordinate values to fit to (eg. r), and the second is the values of the fitted
# quantity (eg. xi). The third column, if present, is the std. dev., which will
# be used to calculate the chi^2 likelihood if present.
# If cov_file is present, it will be preferentially used to calculate the chi^2
# likelihood. It should contain a square covariance matrix, the same length as
# the data in data_file.
data_file   = dndm.dat    ;
cov_file    = cov.dat    ; OPTIONAL

[RunOptions] ###################################################################
# If relax is True, an error in calculation just results in -inf for the
# likelihood, rather than the whole thing crashing. This is pretty useless as it
# stands, because errors are usually because of cosmology, and usually are
# uncatchable.
# nthreads specifies number of threads to use, but this will automatically get
# set to 1 if CAMB is being used on each iteration (otherwise the program will
# hang).
# quantity is the name of the quantity you want to fit (in the Framework class).
# der_params are a set of parameters you want to keep chains for as well (usually
# derived parameters of the main calculation). Note that if any of these is a
# part of a dictionary in the HaloModel class, you must prefix it with the name
# of the dictionary with a colon (see example below). These are written as they
# would be in a python program, with square braces to form a list.
framework   = hmf.MassFunction  ; the full import path to the Framework class to be used.
relax       = False      ;
nthreads    = 0          ; Number of threads to use
xvals       = M          ; one of [M,k]
quantity    = dndm       ; the name of the actual quantity to fit
der_params  = []         ; derived parameters to output
store_class = False      ; Store entire class as pickle file (WARNING: may not be very portable)

[MCMC] #########################################################################
# Here the total number of samples will be nsamples*nwalkers
# The burnin can be specified as an integer, or as a list of 3 numbers: [min,s,max]
# In this case, min iterations will definitely be burnt in. Then it will try
# to keep running until s*acorr < chain_length. Usual values of s may be ~5.
# It will stop at max and continue with the main calculation, though this
# may indicate an error

nsamples    = 100      ; Number of samples to run (per walker)
burnin      = 0        ; Burnin size (per walker)
nwalkers    = 30       ; Number of walkers

[IO] ###########################################################################
outdir      = results  ; Directory to write results to
#prefix                ; Prefix to attach to output files (useful for multi-runs)
chunks      = 0        ; How many samples to take before writing to file
verbose     = 1        ; How much info to write out (not really useful yet)

[CosmoParams] # ALL OPTIONAL ###################################################
# Here you an set which cosmological parameters you want to be varied in the
# MCMC (typically none at all). NOTE: this doesn't set the fiducial cosmology,
# just the parameters that are to be fitted (see below for fiducial model
# parameters). These parameters can be specified as "unif" or "norm" like any
# parameter, but can also be "cov", which uses covariance information in their
# prior. If so, the covar_data setting MUST BE SET, and should be either Planck15,
# Planck13, WMAP9, WMAP7, WMAP5 or WMAP3.

#covar_data  = Planck13 ; Cosmology to use for the covariance information

#sigma_8     = ["unif", 0.1,    2,0.8]
#n           = ["unif", 0.1,    1.5, 0.966]
#H0          = ["unif", 50,     90, 70.0]
#Ob0   	     = ["unif", 0.005, 0.1, 0.05]
#Om0         = ["unif", 0.2,   1.0, 0.3]

[OtherParams] # ALL OPTIONAL ###################################################
#wdm_mass    = ["unif", 0.05,500, 200.0]


[Model] ########################################################################
#
# Add here any arguments to send to the HaloModel constructor (ie. the base model)
# This will be the fiducial model for all calculations. Below is an example of
# what this may look like. Any dictionary arguments must be given as they would in
# a python script.

lnk_min=-4
lnk_max=2
dlnk=0.02
cosmo_params = {"H0":70.0}
z=0.0
n = 0.966
sigma_8 = 0.8
transfer_fit=CAMB
transfer_options={"transfer__kmax":300,"transfer__k_per_logint":15}
mf_fit=Tinker10
